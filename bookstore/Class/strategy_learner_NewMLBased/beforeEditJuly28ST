"""
Template for implementing StrategyLearner  (c) 2016 Tucker Balch
"""

import datetime as dt
import pandas as pd
import util as ut
import random
from indicators import *
import RTLearner as rtl
import BagLearner as bl


#pd.set_option('display.height', 1000)
#pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)


class StrategyLearner(object):

    # constructor
    def __init__(self, verbose = False, impact=0.0):
        self.verbose = verbose
        self.impact = impact

    def author(self):
        return 'pbhatta3'

    def get_features_data(self, sd, ed, syms, lookback):
        #print("GET FEATURES!!")
        delta_day = 20
        mom_win = 5
        ptsma_win = 5
        bollinger_win = 7
        nday_win = 5

        price = get_prices(sd - dt.timedelta(delta_day), ed, syms)
        print("ST Learner Price == ", price)


        mom = get_momentum(price, window=mom_win)[sd:]
        print("GET FEATURES MOM == ", mom.shape)
        print(mom)

        # plot MOM Plot
        norm_price = normalize_date(price[syms])[sd:]
        print("GET FEATURES NORM PRICE == ", norm_price.shape)
        fig, ax = plt.subplots()
        ax.plot(norm_price.index, norm_price, label="STOCK PRICE")
        ax.plot(norm_price.index, mom, label="MOM")
        plt.title('Price Vs MOM')
        plt.legend(loc='lower right')
        ax.set_xlabel("Date")
        ax.set_ylabel("Normalized Price/ MOM")
        fig.text(0.95, 0.05, 'Prakash Graph',
                 fontsize=50, color='gray',
                 ha='right', va='bottom', alpha=0.5)
        plt.show()

        #(df, symbol, lookback)
        ptsma10 = get_price_to_sma(price, syms, lookback=ptsma_win)[sd:]
        print("GET FEATURES ptmsa10 == ", ptsma10.shape)
        print(ptsma10)

        # plot PTSMA Plot
        norm_price = normalize_date(price[syms])[sd:]
        print("GET FEATURES NORM PRICE == ", norm_price.shape)
        fig, ax = plt.subplots()
        ax.plot(norm_price.index, norm_price, label="STOCK PRICE")
        ax.plot(norm_price.index, ptsma10, label="PTSMA")
        plt.title('Price Vs PTSMA')
        plt.legend(loc='lower right')
        ax.set_xlabel("Date")
        ax.set_ylabel("Price VS PTSMA")
        fig.text(0.95, 0.05, 'Prakash Graph',
                 fontsize=50, color='gray',
                 ha='right', va='bottom', alpha=0.5)
        plt.show()



        #get_bollinger(df, symbol, lookback):
        bollinger10, upper_band, lower_band = get_bollinger(price, syms, lookback=bollinger_win)
        bollinger10 = bollinger10[sd:]
        upper_band = upper_band[sd:]
        lower_band = lower_band[sd:]
        print("GET FEATURES bollinger10 == ", bollinger10.shape)
        print(bollinger10)

        # plot Bollinger Plot
        norm_price = normalize_date(price[syms])[sd:]
        print("GET FEATURES NORM PRICE == ", norm_price.shape)
        fig, ax = plt.subplots()
        ax.plot(norm_price.index, norm_price, label="STOCK PRICE")
        ax.plot(norm_price.index, bollinger10, label="BOLLINGER")
        ax.plot(norm_price.index, upper_band, label="UPPER BAND")
        ax.plot(norm_price.index, lower_band, label="LOWER BAND")
        plt.title('Price Vs Bollinger')
        plt.legend(loc='lower right')
        ax.set_xlabel("Date")
        ax.set_ylabel("Price VS Bollindger")
        fig.text(0.95, 0.05, 'Prakash Graph',
                 fontsize=50, color='gray',
                 ha='right', va='bottom', alpha=0.5)
        plt.show()


        #n_day_return(df,symbol, nday):
        nday_return3 = n_day_return(price, syms, nday=nday_win)
        print("GET FEATURES nday_return3 == ", nday_return3.shape)
        print(nday_return3)

        #plot Nday Return
        norm_price = normalize_date(price[syms])[sd:]
        print("GET FEATURES NORM PRICE == ", norm_price.shape)
        fig, ax = plt.subplots()
        ax.plot(norm_price.index, norm_price, label="STOCK PRICE")
        ax.plot(norm_price.index, nday_return3[sd:], label="NDAY Return")
        plt.title('Price Vs NDay Return')
        # plt.title('RTLearner VS LEAF SIZE ')
        plt.legend(loc='lower right')
        ax.set_xlabel("Date")
        ax.set_ylabel("Normalized Price/ Return")
        fig.text(0.95, 0.05, 'Prakash Graph',
                 fontsize=50, color='gray',
                 ha='right', va='bottom', alpha=0.5)
        plt.show()


        #buysell decisions
        buy_sell_decision = pd.DataFrame(nday_return3.copy())
        #buy_sell_decision.index.name = "Date"
        print("GET FEATURES buy_sell_decision == ", type(buy_sell_decision))
        print(buy_sell_decision)


        #
        # if newData.get_value(i, 'DailyReturns') >= 1.0 and newData.get_value(i - 1, 'Holdings') == 0:
        #     newData.set_value(i, "Trades", 1000)
        #     newData.set_value(i, "BSC", 1)
        #     newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings') + newData.get_value(i, 'Trades'))

        for i in buy_sell_decision.index:
            print("POTATP")
            print(nday_return3.get_value(i))
            if nday_return3.get_value(i) >= 1.0:
                #buy_sell_decision[i:] = 1
                #buy_sell_decision.set_value(i,1)
                buy_sell_decision.ix[i,0] = 1
            elif nday_return3.get_value(i) <= -1.0:
                #buy_sell_decision[i:] = -1
                #buy_sell_decision.set_value(i, -1)
                buy_sell_decision.ix[i,0] = -1
            else:
                #buy_sell_decision.iloc[i:] = 0
                #buy_sell_decision.set_value(i, 0)
                buy_sell_decision.ix[i,0] = 0

        print("BUY SELL DECISION")
        print(buy_sell_decision)

        # for i in range(0, nday_return3.shape[0]):
        #     if nday_return3.iloc[i,0] >= 3.0:
        #         buy_sell_decision[i:] = 1
        #     elif nday_return3.iloc[i,0] < -3.0:
        #         buy_sell_decision[i:] = -1
        #     else:
        #         buy_sell_decision.iloc[i:] = 0

        print(buy_sell_decision)

        date_index = mom.index
        print(type(mom), date_index)
        z_score_daily_returns = pd.DataFrame(stats.zscore(nday_return3[sd:]))
        print(z_score_daily_returns)
        print("GET FEATURES Z Score == ", nday_return3[sd:].shape, z_score_daily_returns.shape)
        z_score_daily_returns.index = date_index
        print(z_score_daily_returns)

        #ZScoredValueof3NdayReturn - [(impact - mean of 3NdayReturn)/std of3NdayReturn)]
        print("Applying the impact variable")
        print("IMPACT == ", self.impact)
        print("Mean of 3N day Return ==", np.mean(nday_return3))
        print("Std of 3N day Return ==", nday_return3.std())

        self.impact_adjustment = (self.impact - np.mean(nday_return3))/nday_return3.std()
        print("IMPACT Adjustment == ", self.impact_adjustment)


        #create a train X train Y dataframe out of the indicators
        indicators_df = pd.concat((mom, ptsma10, bollinger10, z_score_daily_returns), axis=1)
        #indicators_df = pd.concat((mom, ptsma10, bollinger10, buy_sell_decision), axis=1)
        #indicators_df.columns = ["MOM", "PTSMA", "BOLLINGER", "DailyReturns"]
        indicators_df.columns = ["MOM", "PTSMA", "BOLLINGER", "Z_score_daily_returns"]
        #indicators_df.columns = ["MOM", "PTSMA", "BOLLINGER", "BuySell"]
        print("Main indicators")
        print(indicators_df[sd:])
        #indicators_df= indicators_df.dropna()
        #print(type(indicators_df))
        #print(indicators_df.tail(10))
        return indicators_df[sd:], self.impact_adjustment


    #get_features_data(self, sd = dt.datetime(2008, 1, 1), ed = dt.datetime(2009, 12, 31), syms = ['AAPL'], lookback = 21)
       # this method should create a QLearner, and train it for trading
    def addEvidence(self, symbol="IBM", \
                        sd=dt.datetime(2008, 1, 1), \
                        ed=dt.datetime(2009, 1, 1), \
                        sv=10000):
        train_data, impact_adj = self.get_features_data(sd, ed, symbol, lookback=10)
        #print("TRAINING DATA BEFORE")
        #print(train_data)
        trainX = train_data.values[:, 0:-1]
        trainY = train_data.values[:, -1]
        #print("Train X \n", trainX)
        #print("Train Y \n", trainY)
        self.bag_learner = bl.BagLearner(learner=rtl.RTLearner, kwargs={"leaf_size": 5}, bags=20, boost=False,
                                         verbose=False)
        self.bag_learner.addEvidence(trainX, trainY)



    def testPolicy(self, symbol = "IBM", \
        sd=dt.datetime(2009,1,1), \
        ed=dt.datetime(2010,1,1), \
        sv = 10000):
        train_data, impact_adj = self.get_features_data(sd, ed, symbol, lookback=10)
        #print("TRAINING DATA in TEST POLICY")
        #print(train_data)
        trainX = train_data.values[:, 0:-1]
        trainY = train_data.values[:, -1]

        predictYValue = self.bag_learner.query(trainX)
        #self.bag_learner.query(trainX)
        predictYValue = pd.DataFrame(predictYValue)
        print("PREDICTION Y VALUE == ", type(predictYValue))
        print(predictYValue)
        train_data.index.name = "Date"


        newData = train_data.copy()
        #print("NEW DATA ", predictYValue.loc[:,:].values)
        #print("TESTTEST")
        newData['Z_score_daily_returns'] = predictYValue.loc[:,:].values
        #print(newData)
        #newData = pd.DataFrame(newData['DailyReturns'])

        #creating trades and holdings df
        # trades_df = newData['DailyReturns'].copy() *0
        # holdings_df = newData['DailyReturns'].copy() *0
        # print(trades_df, holdings_df)

        newData["BSC"] = 0
        newData['Trades'] = 0
        newData['Holdings'] = 0

        #print("BEFORE")
        #print(newData)
        preserved_index = newData.index
        #print("THE INDEX == ", preserved_index)
        #newData.index.name = "Date"
        newData.reset_index(level=["Date"], inplace=True)
        #print("THE INDEX == ", newData.index)
        #print(type(newData))

        buy_val = 0.08 -self.impact_adjustment # 2 pass 0.15
        sell_val = - 0.2 - self.impact_adjustment # 2 pass -0.3
        for i in newData.index[1:]:
            if newData.get_value(i, 'Z_score_daily_returns') >= buy_val  and newData.get_value(i - 1, 'Holdings') == 0:
                newData.set_value(i, "Trades", 1000)
                newData.set_value(i, "BSC", 1)
                newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings') + newData.get_value(i, 'Trades'))
            elif newData.get_value(i, 'Z_score_daily_returns') >= buy_val and newData.get_value(i - 1, 'Holdings') == 1000:
                newData.set_value(i, "Trades", 0)
                newData.set_value(i, "BSC", 1)
                newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings') + newData.get_value(i, 'Trades'))
            elif newData.get_value(i, 'Z_score_daily_returns') < sell_val and newData.get_value(i - 1, 'Holdings') == 1000:
                newData.set_value(i, "Trades", -2000)
                newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings') + newData.get_value(i, 'Trades'))
                newData.set_value(i, "BSC", -1)
            elif newData.get_value(i, 'Z_score_daily_returns') >= buy_val and newData.get_value(i - 1, 'Holdings') == -1000:
                newData.set_value(i, "Trades", 2000)
                newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings') + newData.get_value(i, 'Trades'))
                newData.set_value(i, "BSC", 1)

            #allowed to short anyway
            elif newData.get_value(i, 'Z_score_daily_returns') < sell_val and newData.get_value(i - 1, 'Holdings') == 0:
                newData.set_value(i, "Trades", -1000)
                newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings') + newData.get_value(i, 'Trades'))
                newData.set_value(i, "BSC", -1)
            else:
                newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings'))
                newData.set_value(i, "BSC", 0)

        ### THIS IS MORE CLASSIFICATION
        # for i in newData.index[1:]:
        #     if newData.get_value(i, 'DailyReturns') == 1.0 and newData.get_value(i - 1, 'Holdings') == 0:
        #         newData.set_value(i, "Trades", 1000)
        #         newData.set_value(i, "BSC", 1)
        #         newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings') + newData.get_value(i, 'Trades'))
        #     elif newData.get_value(i, 'DailyReturns') == 1.0 and newData.get_value(i - 1, 'Holdings') == 1000:
        #         newData.set_value(i, "Trades", 0)
        #         newData.set_value(i, "BSC", 1)
        #         newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings') + newData.get_value(i, 'Trades'))
        #     elif newData.get_value(i, 'DailyReturns') == -1.0 and newData.get_value(i - 1, 'Holdings') == 1000:
        #         newData.set_value(i, "Trades", -2000)
        #         newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings') + newData.get_value(i, 'Trades'))
        #         newData.set_value(i, "BSC", -1)
        #     elif newData.get_value(i, 'DailyReturns') == 1.0 and newData.get_value(i - 1, 'Holdings') == -1000:
        #         newData.set_value(i, "Trades", 2000)
        #         newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings') + newData.get_value(i, 'Trades'))
        #         newData.set_value(i, "BSC", 1)
        #
        #     #allowed to short anyway
        #     elif newData.get_value(i, 'DailyReturns') == -1.0 and newData.get_value(i - 1, 'Holdings') == 0:
        #         newData.set_value(i, "Trades", -1000)
        #         newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings') + newData.get_value(i, 'Trades'))
        #         newData.set_value(i, "BSC", -1)
        #     else:
        #         newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings'))
        #         newData.set_value(i, "BSC", 0)

        # for i in newData.index[1:]:
        #     if newData.get_value(i, 'DailyReturns') >= 1.0 and newData.get_value(i - 1, 'Holdings') == 0:
        #         newData.set_value(i, "Trades", 1000)
        #         newData.set_value(i, "BSC", 1)
        #         newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings') + newData.get_value(i, 'Trades'))
        #     elif newData.get_value(i, 'DailyReturns') >= 1.0 and newData.get_value(i - 1, 'Holdings') == 1000:
        #         newData.set_value(i, "Trades", 0)
        #         newData.set_value(i, "BSC", 1)
        #         newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings') + newData.get_value(i, 'Trades'))
        #     elif newData.get_value(i, 'DailyReturns') < -2.0 and newData.get_value(i - 1, 'Holdings') == 1000:
        #         newData.set_value(i, "Trades", -2000)
        #         newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings') + newData.get_value(i, 'Trades'))
        #         newData.set_value(i, "BSC", -1)
        #     elif newData.get_value(i, 'DailyReturns') >= 1.0 and newData.get_value(i - 1, 'Holdings') == -1000:
        #         newData.set_value(i, "Trades", 2000)
        #         newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings') + newData.get_value(i, 'Trades'))
        #         newData.set_value(i, "BSC", 1)
        #     else:
        #         newData.set_value(i, 'Holdings', newData.get_value(i - 1, 'Holdings'))
        #         newData.set_value(i, "BSC", 0)

        print(newData)

        final_trades = pd.DataFrame(newData['Trades'])
        #print("PRESERVED INDEX ++ ", preserved_index)
        final_trades.index = preserved_index
        print("Type of final trades == ", type(final_trades))
        print(final_trades)
        return final_trades

def test_code():
    x= StrategyLearner(verbose = False, impact=0.0)
    #x.build_RL_data(sd = dt.datetime(2010,1,1),ed = dt.datetime(2011,12,31))
    #x.get_features_data(sd = dt.datetime(2008, 1, 1), ed = dt.datetime(2009, 12, 31), syms = ['AAPL'], lookback = 21)
    symbs='AAPL'
    x.addEvidence(symbol = symbs, sd = dt.datetime(2008, 1, 1), ed = dt.datetime(2009, 12, 31),  sv=10000)
    x.testPolicy(symbol=symbs, sd=dt.datetime(2008, 1, 1), ed=dt.datetime(2009, 12, 31), sv=10000)
if __name__=="__main__":
    print "One does not simply think up a strategy"
    test_code()





